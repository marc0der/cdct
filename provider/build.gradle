plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "java"
    id "groovy"
    id "au.com.dius.pact" version "4.0.0"
}

version "0.1"
group "org.example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testCompileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.5.0"

    testImplementation "au.com.dius:pact-jvm-provider:4.0.3"
}

test.classpath += configurations.developmentOnly

mainClassName = "org.example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

// This will be called before the provider task
task('startTheApp') {
    doLast {
        //start up your provider here
    }
}

// This will be called after the provider task
task('killTheApp') {
    doLast {
        // kill your provider here
    }
}

pact {
    serviceProviders {
        userServiceProvider {
            protocol = 'http'
            host = 'localhost'
            port = 8080
            path = '/'

            startProviderTask = startTheApp
            terminateProviderTask = killTheApp

            hasPactWith('user-consumer') {
                pactFile = file('../consumer/target/pacts/user-data-consumer-user-data-provider.json')
            }
        }
    }
}

